[{"title":"Config","type":0,"sectionRef":"#","url":"api/Config","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Config","url":"api/Config#properties","content":" "},{"title":"Precision​","type":1,"pageTitle":"Config","url":"api/Config#Precision","content":"&lt;/&gt; Config.Precision: number The target precision used to compare numbers and measure simularity in Utilities:CompareNumbers. Set to 1e-3 (or 0.001) by default.  "},{"title":"MaxNumber​","type":1,"pageTitle":"Config","url":"api/Config#MaxNumber","content":"&lt;/&gt; Config.MaxNumber: number The MaxNumber used to replace infinity (or math.huge) during Utilities:ProduceEstimate. Set to 2147483646 by default. "},{"title":"Utilities","type":0,"sectionRef":"#","url":"api/Utilities","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Utilities","url":"api/Utilities#functions","content":" "},{"title":"ProduceCoefficients​","type":1,"pageTitle":"Utilities","url":"api/Utilities#ProduceCoefficients","content":"&lt;/&gt; Utilities:ProduceCoefficients( ProjectileSpeed: number,-- The speed that the projectile will have when fired. DeltaPosition: Vector3 ,-- The overall position where the shooter's at (0,0,0). DeltaVelocity: Vector3? ,-- The overall velocity where the shooter's at (0,0,0). DeltaAcceleration: Vector3? ,-- The overall acceleration where the shooter's at (0,0,0). DeltaJerk: Vector3? -- The overall jerk where the shooter's at (0,0,0). ) → number,number?,number?,number?,number?,number?,number?-- Returns the coefficients in the format of T0, T1, T2, T3, T4, T5, T6, where: T0 + T1x + T2x^2 + T3x^3 + T4x^4 + T5x^5 + T6x^6 = 0 A function that returns the values of coefficients required to identify the polynomials of an equation and find the solutions to said polynomials. Process found here: https://docs.google.com/document/d/1TKhiXzLMHVjDPX3a3U0uMvaiW1jWQWUmYpICjIDeMSA/edit  "},{"title":"GetRoot​","type":1,"pageTitle":"Utilities","url":"api/Utilities#GetRoot","content":"&lt;/&gt; Utilities:GetRoot( n: number,-- The number of which the root will be applied to (n^root). root: number?-- The number of the root (n^root). By default is equal to 2. ) → number-- Returns the result of n^root. Returns NaN if the root is even and n is negative. A workaround function to address how odd roots of a negative returns NaN when they should be returning a negative odd-rooted number.  "},{"title":"SolvePolynomial​","type":1,"pageTitle":"Utilities","url":"api/Utilities#SolvePolynomial","content":"&lt;/&gt; Utilities:SolvePolynomial( T0: number,-- The first coefficient of the polynomial. T0 in T0 + T1x + T2x^2 + T3x^3 + T4x^4 = 0 T1: number,-- The second coefficient of the polynomial. T1 in T0 + T1x + T2x^2 + T3x^3 + T4x^4 = 0 T2: number,-- The third coefficient of the polynomial. T2 in T0 + T1x + T2x^2 + T3x^3 + T4x^4 = 0 T3: number,-- The fourth coefficient of the polynomial. T3 in T0 + T1x + T2x^2 + T3x^3 + T4x^4 = 0 T4: number-- The fifth coefficient of the polynomial. T4 in T0 + T1x + T2x^2 + T3x^3 + T4x^4 = 0 ) → number,number?,number?,number?-- Returns all possible solutions of the given polynomial, up to four solutions. A function that solves a polynomial given its coefficients up to the fourth power (T0 + T1x + T2x^2 + T3x^3 + T4x^4 = 0).  "},{"title":"ProduceDeltas​","type":1,"pageTitle":"Utilities","url":"api/Utilities#ProduceDeltas","content":"&lt;/&gt; Utilities:ProduceDeltas( Target: Vector3? ,-- The vector3 of the target. By default Vector3.new(0,0,0). Shooter: Vector3? -- The vector3 of the shooter. By default Vector3.new(0,0,0). ) → Vector3 -- The resulting Vector3 of (Target - Shooter). A short function that finds the overall vector between two Vector3s (Final Vector - Initial Vector).  "},{"title":"ProduceDerivative​","type":1,"pageTitle":"Utilities","url":"api/Utilities#ProduceDerivative","content":"&lt;/&gt; Utilities:ProduceDerivative( ...: number-- The coefficients of the polynomial. T0, T1, T2, T3, T4, ..., Tn, where: T0 + T1x + T2x^2 + T3x^3 + T4x^4 + ... + Tn^n = 0 ) → ...number-- The coefficients of the derviative polynomial from the initial polynomial. A function that returns the derivative of a polynomial, given its coefficients.  "},{"title":"InputPolynomial​","type":1,"pageTitle":"Utilities","url":"api/Utilities#InputPolynomial","content":"&lt;/&gt; Utilities:InputPolynomial( Input: number,-- The number that will be put into the given polynomial. Can be math.huge (infinity). ...: number-- The coefficients of the polynomial. T0, T1, T2, T3, T4, ..., Tn, where: T0 + T1x + T2x^2 + T3x^3 + T4x^4 + ... + Tn^n = 0 ) → number-- The result of plugging in Input into the given polynomial. A function that returns the result of pluging in Input into a polynomial, given its coefficients. It can also evaluate the limit of positive and negative math.huge (infinity) if the Input is set to be that.  "},{"title":"CompareNumbers​","type":1,"pageTitle":"Utilities","url":"api/Utilities#CompareNumbers","content":"&lt;/&gt; Utilities:CompareNumbers( N1: number,-- The first number. N2: number,-- The second number. Precision: number?-- The desired range of precision that the numbers should be in. This number will be divided by 2 and added/subtracted to the first number to check to see if the second number is inbetween it. By default is set to Config.Precision. ) → boolean-- The result of plugging in Input into the given polynomial. A function that returnsif two numbers are within a given range of precision.  "},{"title":"ProduceEstimate​","type":1,"pageTitle":"Utilities","url":"api/Utilities#ProduceEstimate","content":"&lt;/&gt; Utilities:ProduceEstimate( Point1: number,-- One critical point of which should be a min/max. Point2: number,-- Another critical poit of which should be a min/max. ...: number-- The coefficients of the polynomial. T0, T1, T2, T3, T4, ..., Tn, where: T0 + T1x + T2x^2 + T3x^3 + T4x^4 + ... + Tn^n = 0 ) → number-- The result of plugging in Input into the given polynomial. A function that recursively calls itself to figure out where inbetween Point1 and Point2 it equals 0 within the range of Config.Precision. It performs the Bisection method to do this. If either point is equal to math.huge (infinity), it will replace it with Config.MaxNumber.  "},{"title":"RemoveDuplicatesFromArray​","type":1,"pageTitle":"Utilities","url":"api/Utilities#RemoveDuplicatesFromArray","content":"&lt;/&gt; Utilities:RemoveDuplicatesFromArray( InputArray: Array&lt;any&gt;-- The array of which should be pruned of duplicates. ) → Array&lt;any&gt;-- The result of plugging in Input into the given polynomial. A function that creates a new array which only contains unique values.  "},{"title":"ProduceCriticalPoints​","type":1,"pageTitle":"Utilities","url":"api/Utilities#ProduceCriticalPoints","content":"&lt;/&gt; Utilities:ProduceCriticalPoints( ...: number-- The coefficients of the polynomial. T0, T1, T2, T3, T4, ..., Tn, where: T0 + T1x + T2x^2 + T3x^3 + T4x^4 + ... + Tn^n = 0 ) → ...number-- The critical points of the given polynomial. A function that finds and returns the values where a relative/absolute max/min occurs in the polynomial. If the polynomial is a quartic or lower, it will use the general formula in SolvePolynomial. Otherwise, it will perform the bisection method via ProduceEstimate.  "},{"title":"GetEstimate​","type":1,"pageTitle":"Utilities","url":"api/Utilities#GetEstimate","content":"&lt;/&gt; Utilities:GetEstimate( ...: number-- The coefficients of the polynomial that needs to be solved. T0, T1, T2, T3, T4, ..., Tn, where: T0 + T1x + T2x^2 + T3x^3 + T4x^4 + ... + Tn^n = 0 ) → ...number-- The solutions of the given polynomial. A function that finds and returns the solutions to the inputted polynomial which doesn't have a general formula with critical points and the bisection method. "},{"title":"BallisticsFunctions","type":0,"sectionRef":"#","url":"api/BallisticsFunctions","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"BallisticsFunctions","url":"api/BallisticsFunctions#types","content":" "},{"title":"LookVector​","type":1,"pageTitle":"BallisticsFunctions","url":"api/BallisticsFunctions#LookVector","content":"&lt;/&gt; type LookVector = Vector3  A unit Vector3 that is equivalent to CFrame.LookVector.  "},{"title":"AverageHitPosition​","type":1,"pageTitle":"BallisticsFunctions","url":"api/BallisticsFunctions#AverageHitPosition","content":"&lt;/&gt; type AverageHitPosition = Vector3  A Vector3 where the projectile and the target will collide.  "},{"title":"PositionAccuracy​","type":1,"pageTitle":"BallisticsFunctions","url":"api/BallisticsFunctions#PositionAccuracy","content":"&lt;/&gt; type PositionAccuracy = number A number that shows how far off the average is from the projected target collision positions due to calculation incaccuracies.  "},{"title":"SimulatedHitPosition​","type":1,"pageTitle":"BallisticsFunctions","url":"api/BallisticsFunctions#SimulatedHitPosition","content":"&lt;/&gt; type SimulatedHitPosition = Vector3  The projected target collision position via: HitPosition = TargetInitialPosition + TargetVelocityTravelTime + TargetAcceleration/2TravelTime^2 + TargetJerk/3*TravelTime^3.  "},{"title":"ProjectedHitPosition​","type":1,"pageTitle":"BallisticsFunctions","url":"api/BallisticsFunctions#ProjectedHitPosition","content":"&lt;/&gt; type ProjectedHitPosition = Vector3  The projected projectile collision position via: HitPosition = ShooterInitialPosition + ((SimulationLookVectorProjectileSpeed + ShooterVelocity)TravelTime) + ShooterAcceleration/2TravelTime^2 + ShooterJerk/3TravelTime^3. "},{"title":"Properties​","type":1,"pageTitle":"BallisticsFunctions","url":"api/BallisticsFunctions#properties","content":" "},{"title":"Utilities​","type":1,"pageTitle":"BallisticsFunctions","url":"api/BallisticsFunctions#Utilities","content":"&lt;/&gt; BallisticsFunctions.Utilities: Utilities The Utilities class of which contains all of the nessessary functions used to create the right data. "},{"title":"Functions​","type":1,"pageTitle":"BallisticsFunctions","url":"api/BallisticsFunctions#functions","content":" "},{"title":"GetHitInfo​","type":1,"pageTitle":"BallisticsFunctions","url":"api/BallisticsFunctions#GetHitInfo","content":"Untested &lt;/&gt; BallisticsFunctions:GetHitInfo( ProjectileSpeed: number,-- The initial speed of the projectile. ShooterPosition: Vector3 ,-- The (initial) position of the projectile/shooter. ShooterVelocity: Vector3? ,-- The (initial) velocity of the projectile/shooter. ShooterAcceleration: Vector3? ,-- The (initial) acceleration of the projectile/shooter. TargetPosition: Vector3 ,-- The (initial) position of the target. TargetVelocity: Vector3? ,-- The (initial) velocity of the target. TargetAcceleration: Vector3? -- The (initial) velocity of the target. ) → LookVector?,AverageHitPosition?,PositionAccuracy?,SimulatedHitPosition?,ProjectedHitPosition?-- Returns nil if there isn't a valid hit direction. A function that computes the LookVector and HitPosition from ProjectileSpeed, Positions, Velocities, and Acceleration. Refer to BallisticsFunctions:GetHitInfoWithJerk to compute with Jerk.  "},{"title":"GetHitInfoWithJerk​","type":1,"pageTitle":"BallisticsFunctions","url":"api/BallisticsFunctions#GetHitInfoWithJerk","content":"Untested &lt;/&gt; BallisticsFunctions:GetHitInfoWithJerk( ProjectileSpeed: number,-- The initial speed of the projectile. ShooterPosition: Vector3 ,-- The (initial) position of the projectile/shooter. ShooterVelocity: Vector3? ,-- The (initial) velocity of the projectile/shooter. ShooterAcceleration: Vector3? ,-- The (initial) acceleration of the projectile/shooter. ShooterJerk: Vector3? ,-- The jerk (rate of change of acceleration) of the projectile/shooter. TargetPosition: Vector3 ,-- The (initial) position of the target. TargetVelocity: Vector3? ,-- The (initial) velocity of the target. TargetAcceleration: Vector3? ,-- The (initial) velocity of the target. TargetJerk: Vector3? -- The jerk (rate of change of acceleration) of the target. ) → LookVector?,AverageHitPosition?,PositionAccuracy?,SimulatedHitPosition?,ProjectedHitPosition?-- Returns nil if there isn't a valid hit direction. A function that computes the LookVector and HitPosition from ProjectileSpeed, Positions, Velocities, Acceleration, and Jerk.  "},{"title":"GetHitTimes​","type":1,"pageTitle":"BallisticsFunctions","url":"api/BallisticsFunctions#GetHitTimes","content":"&lt;/&gt; BallisticsFunctions:GetHitTimes( ProjectileSpeed: number,-- The initial speed of the projectile. ShooterPosition: Vector3 ,-- The (initial) position of the projectile/shooter. ShooterVelocity: Vector3? ,-- The (initial) velocity of the projectile/shooter. ShooterAcceleration: Vector3? ,-- The (initial) acceleration of the projectile/shooter. TargetPosition: Vector3 ,-- The (initial) position of the target. TargetVelocity: Vector3? ,-- The (initial) velocity of the target. TargetAcceleration: Vector3? -- The (initial) velocity of the target. ) → ...number-- The times of when the projectile and target can collide. A function that computes the times of collision from ProjectileSpeed, Positions, Velocities, and Acceleration. Refer to BallisticsFunctions:GetHitTimesWithJerk to compute with Jerk.  "},{"title":"GetHitTimesWithJerk​","type":1,"pageTitle":"BallisticsFunctions","url":"api/BallisticsFunctions#GetHitTimesWithJerk","content":"&lt;/&gt; BallisticsFunctions:GetHitTimesWithJerk( ProjectileSpeed: number,-- The initial speed of the projectile. ShooterPosition: Vector3 ,-- The (initial) position of the projectile/shooter. ShooterVelocity: Vector3? ,-- The (initial) velocity of the projectile/shooter. ShooterAcceleration: Vector3? ,-- The (initial) acceleration of the projectile/shooter. ShooterJerk: Vector3? ,-- The jerk (rate of change of acceleration) of the projectile/shooter. TargetPosition: Vector3 ,-- The (initial) position of the target. TargetVelocity: Vector3? ,-- The (initial) velocity of the target. TargetAcceleration: Vector3? ,-- The (initial) velocity of the target. TargetJerk: Vector3? -- The jerk (rate of change of acceleration) of the target. ) → ...number-- The times of when the projectile and target can collide. A function that computes the times of collision from ProjectileSpeed, Positions, Velocities, Acceleration, and Jerk. "}]